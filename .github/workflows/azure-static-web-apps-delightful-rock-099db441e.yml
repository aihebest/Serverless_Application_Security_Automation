name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ master, main ]

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Debug Directory Structure
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "security-scan-dashboard contents:"
          ls -la security-scan-dashboard || echo "Directory not found"

      - name: Install Dependencies
        run: |
          # Navigate to the project directory
          cd security-scan-dashboard
          
          # Debug project structure
          echo "Project directory contents:"
          ls -la
          
          # Create .npmrc
          echo "legacy-peer-deps=true" > .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
          
          # Remove existing node_modules if any
          rm -rf node_modules
          
          # Install dependencies using the existing package.json
          echo "Installing dependencies..."
          npm install
          
          echo "Checking installed dependencies..."
          npm list --depth=0

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        env:
          REACT_APP_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          REACT_APP_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DELIGHTFUL_ROCK_099DB441E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/security-scan-dashboard"
          api_location: "/api"
          output_location: "build"
          app_build_command: |
            npm install
            npm run build

      - name: Verify Build
        if: steps.builddeploy.outcome == 'success'
        run: |
          cd security-scan-dashboard
          if [ -d "build" ]; then
            echo "Build successful!"
            ls -la build/
          else
            echo "Build failed!"
            exit 1
          fi