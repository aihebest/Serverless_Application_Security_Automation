name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ master, main ]  # Include both main and master
    paths:
      - 'security-scan-dashboard/**'
      - 'api/**'
      - '.github/workflows/**'
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ master, main ]
    paths:
      - 'security-scan-dashboard/**'
      - 'api/**'

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      # Add environment setup verification
      - name: Verify Environment
        run: |
          echo "Node version:"
          node -v
          echo "Checking repository structure:"
          ls -la
          echo "Checking security-scan-dashboard:"
          ls -la security-scan-dashboard || echo "security-scan-dashboard directory not found"
          echo "Checking api directory:"
          ls -la api || echo "api directory not found"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'security-scan-dashboard/package-lock.json'

      - name: Install Dependencies
        run: |
          cd security-scan-dashboard
          npm ci
          npm install axios @azure/msal-react @azure/msal-browser @fluentui/react-components --save

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        env:
          REACT_APP_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          REACT_APP_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DELIGHTFUL_ROCK_099DB441E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/security-scan-dashboard"
          api_location: "/api"
          output_location: "build"
          app_build_command: "npm run build"
          
      # Add deployment verification
      - name: Verify Deployment
        if: steps.builddeploy.outcome == 'success'
        run: |
          echo "Deployment completed successfully"
          echo "Build output:"
          ls -la security-scan-dashboard/build