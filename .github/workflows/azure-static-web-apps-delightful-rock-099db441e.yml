name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ master, main ]

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.4'

      - name: Set up project structure
        run: |
          # Ensure we're in the right directory
          mkdir -p security-scan-dashboard
          cd security-scan-dashboard
          
          # Create necessary directories
          mkdir -p src public
          
          # Create basic React files
          echo '<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><title>Security Dashboard</title></head><body><div id="root"></div></body></html>' > public/index.html
          
          echo 'import React from "react"; import ReactDOM from "react-dom/client"; import App from "./App"; const root = ReactDOM.createRoot(document.getElementById("root")); root.render(<React.StrictMode><App /></React.StrictMode>);' > src/index.js
          
          echo 'import React from "react"; function App() { return <div>Security Dashboard</div>; } export default App;' > src/App.js
          
          # Create package.json
          echo '{
            "name": "security-scan-dashboard",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "@azure/msal-browser": "2.38.0",
              "@azure/msal-react": "1.5.13",
              "@fluentui/react-components": "9.30.0",
              "react": "18.2.0",
              "react-dom": "18.2.0",
              "react-scripts": "5.0.1",
              "react-router-dom": "6.22.0"
            },
            "devDependencies": {
              "@babel/core": "7.23.9",
              "@babel/preset-env": "7.23.9",
              "@babel/preset-react": "7.23.9",
              "@babel/plugin-proposal-private-property-in-object": "7.21.11"
            },
            "scripts": {
              "start": "react-scripts start",
              "build": "react-scripts build",
              "test": "react-scripts test",
              "eject": "react-scripts eject"
            },
            "browserslist": {
              "production": [
                ">0.2%",
                "not dead",
                "not op_mini all"
              ],
              "development": [
                "last 1 chrome version",
                "last 1 firefox version",
                "last 1 safari version"
              ]
            }
          }' > package.json
          
          # Create .npmrc
          echo "legacy-peer-deps=true
          strict-peer-dependencies=false" > .npmrc

      - name: Install Dependencies
        working-directory: ./security-scan-dashboard
        run: |
          # Clean installation
          rm -rf node_modules package-lock.json
          
          # Install dependencies
          npm install --legacy-peer-deps
          
          # Verify installation
          npm list react react-dom @babel/core

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        env:
          REACT_APP_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          REACT_APP_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
          CI: false
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DELIGHTFUL_ROCK_099DB441E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "security-scan-dashboard"
          api_location: "SecurityScanFunction"
          output_location: "build"
          app_build_command: |
            npm install --legacy-peer-deps
            CI=false npm run build

      - name: Log Build Status
        if: always()
        run: |
          echo "Workspace contents:"
          ls -la
          echo "Security dashboard contents:"
          ls -la security-scan-dashboard || echo "Directory not found"
          echo "Build directory contents:"
          ls -la security-scan-dashboard/build || echo "Build directory not found"
          echo "Package versions:"
          cd security-scan-dashboard && npm list || echo "Cannot read package versions"