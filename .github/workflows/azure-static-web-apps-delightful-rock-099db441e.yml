name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ master, main ]

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies using existing package-lock.json
      - name: Install Dependencies
        run: |
          cd security-scan-dashboard
          
          # Create .npmrc for handling peer dependencies
          echo "legacy-peer-deps=true" > .npmrc
          echo "strict-peer-dependencies=false" >> .npmrc
          
          # Install dependencies using existing package-lock.json
          npm ci || (
            # If npm ci fails, fall back to clean install
            rm -rf node_modules
            npm install
          )
          
          # Additional dependencies if needed
          npm install --save \
            @azure/msal-browser@2.39.0 \
            @azure/msal-react@1.5.13 \
            @fluentui/react-components@9.55.1 \
            @microsoft/applicationinsights-web@3.3.3 \
            @microsoft/signalr@7.0.14 \
            recharts@2.13.0

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        env:
          REACT_APP_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
          REACT_APP_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
          REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_DELIGHTFUL_ROCK_099DB441E }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/security-scan-dashboard"
          api_location: "/api"
          output_location: "build"
          app_build_command: "npm run build"

      - name: Verify Build
        if: steps.builddeploy.outcome == 'success'
        run: |
          cd security-scan-dashboard
          if [ -d "build" ]; then
            echo "Build successful!"
            ls -la build/
          else
            echo "Build failed!"
            exit 1
          fi

      - name: Log Dependencies
        run: |
          cd security-scan-dashboard
          echo "Installed dependencies:"
          npm list --depth=0